_current_progress_remaining:
    value: 1
_custom_logger:
    value: "False"
_episode_num:
    value: 0
_episode_storage:
    value: None
_last_episode_starts:
    value: '[ True]'
_last_obs:
    value: |-
        [[ 7.6868224  9.3247    10.613014  11.977851  13.411466  14.585029
          15.398188  16.332815  17.486475 ]]
_last_original_obs:
    value: |-
        [[ 7.6868224  9.3247    10.613014  11.977851  13.411466  14.585029
          15.398188  16.332815  17.486475 ]]
_logger:
    value: <stable_baselines3.common.logger.Logger object at 0x17b659010>
_n_updates:
    value: 0
_num_timesteps_at_start:
    value: 0
_stats_window_size:
    value: 100
_total_timesteps:
    value: 500000
_vec_normalize_env:
    value: <stable_baselines3.common.vec_env.vec_normalize.VecNormalize object at 0x11f7653a0>
_wandb:
    value:
        cli_version: 0.19.8
        m: []
        python_version: 3.12.8
        t:
            "1":
                - 1
                - 55
            "2":
                - 1
                - 55
            "3":
                - 1
                - 2
                - 3
                - 13
                - 16
                - 22
                - 23
                - 35
                - 55
            "4": 3.12.8
            "5": 0.19.8
            "8":
                - 5
            "12": 0.19.8
            "13": darwin-arm64
action_noise:
    value: None
action_space:
    value: Box(0.0, [0.99 1.   1.  ], (3,), float32)
action_space_lower_bound:
    value:
        - 0
        - 0
        - 0
action_space_upper_bound:
    value:
        - 0.99
        - 1
        - 1
actor:
    value: |-
        Actor(
          (features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (latent_pi): Sequential(
            (0): Linear(in_features=9, out_features=256, bias=True)
            (1): ReLU()
            (2): Linear(in_features=256, out_features=256, bias=True)
            (3): ReLU()
          )
          (mu): Linear(in_features=256, out_features=3, bias=True)
          (log_std): Linear(in_features=256, out_features=3, bias=True)
        )
algo:
    value: SAC
algorithm:
    value: SAC
alpha:
    value: 1
batch_norm_stats:
    value: '[]'
batch_norm_stats_target:
    value: '[]'
batch_size:
    value: 256
buffer_size:
    value: 1000000
consumptions_params:
    value:
        - 0.8
        - 5
critic:
    value: |-
        ContinuousCritic(
          (features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (qf0): Sequential(
            (0): Linear(in_features=12, out_features=256, bias=True)
            (1): ReLU()
            (2): Linear(in_features=256, out_features=256, bias=True)
            (3): ReLU()
            (4): Linear(in_features=256, out_features=1, bias=True)
          )
          (qf1): Sequential(
            (0): Linear(in_features=12, out_features=256, bias=True)
            (1): ReLU()
            (2): Linear(in_features=256, out_features=256, bias=True)
            (3): ReLU()
            (4): Linear(in_features=256, out_features=1, bias=True)
          )
        )
critic_target:
    value: |-
        ContinuousCritic(
          (features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (qf0): Sequential(
            (0): Linear(in_features=12, out_features=256, bias=True)
            (1): ReLU()
            (2): Linear(in_features=256, out_features=256, bias=True)
            (3): ReLU()
            (4): Linear(in_features=256, out_features=1, bias=True)
          )
          (qf1): Sequential(
            (0): Linear(in_features=12, out_features=256, bias=True)
            (1): ReLU()
            (2): Linear(in_features=256, out_features=256, bias=True)
            (3): ReLU()
            (4): Linear(in_features=256, out_features=1, bias=True)
          )
        )
device:
    value: cpu
ent_coef:
    value: auto
ent_coef_optimizer:
    value: |-
        Adam (
        Parameter Group 0
            amsgrad: False
            betas: (0.9, 0.999)
            capturable: False
            differentiable: False
            eps: 1e-08
            foreach: None
            fused: None
            lr: 0.0003
            maximize: False
            weight_decay: 0
        )
env:
    value: <stable_baselines3.common.vec_env.vec_normalize.VecNormalize object at 0x11f7653a0>
ep_info_buffer:
    value: deque([], maxlen=100)
ep_success_buffer:
    value: deque([], maxlen=100)
episode_steps:
    value: 1000
exp_salaries_params:
    value:
        - 10
        - 1
gamma:
    value: 0.99
gradient_steps:
    value: 1
inital_taxes_params:
    value:
        - 0.04
        - 0.5
        - 0.5
learning_rate:
    value: 0.0003
learning_starts:
    value: 100
log_ent_coef:
    value: tensor([0.], requires_grad=True)
lr_schedule:
    value: <function get_schedule_fn.<locals>.<lambda> at 0x14e808b80>
n_envs:
    value: 1
num_states:
    value: 9
num_timesteps:
    value: 0
observation_space:
    value: Box(-inf, inf, (9,), float32)
optimize_memory_usage:
    value: "False"
percentiles:
    value:
        - 1
        - 10
        - 25
        - 50
        - 75
        - 90
        - 95
        - 99
        - 99.9
policy:
    value: |-
        SACPolicy(
          (actor): Actor(
            (features_extractor): FlattenExtractor(
              (flatten): Flatten(start_dim=1, end_dim=-1)
            )
            (latent_pi): Sequential(
              (0): Linear(in_features=9, out_features=256, bias=True)
              (1): ReLU()
              (2): Linear(in_features=256, out_features=256, bias=True)
              (3): ReLU()
            )
            (mu): Linear(in_features=256, out_features=3, bias=True)
            (log_std): Linear(in_features=256, out_features=3, bias=True)
          )
          (critic): ContinuousCritic(
            (features_extractor): FlattenExtractor(
              (flatten): Flatten(start_dim=1, end_dim=-1)
            )
            (qf0): Sequential(
              (0): Linear(in_features=12, out_features=256, bias=True)
              (1): ReLU()
              (2): Linear(in_features=256, out_features=256, bias=True)
              (3): ReLU()
              (4): Linear(in_features=256, out_features=1, bias=True)
            )
            (qf1): Sequential(
              (0): Linear(in_features=12, out_features=256, bias=True)
              (1): ReLU()
              (2): Linear(in_features=256, out_features=256, bias=True)
              (3): ReLU()
              (4): Linear(in_features=256, out_features=1, bias=True)
            )
          )
          (critic_target): ContinuousCritic(
            (features_extractor): FlattenExtractor(
              (flatten): Flatten(start_dim=1, end_dim=-1)
            )
            (qf0): Sequential(
              (0): Linear(in_features=12, out_features=256, bias=True)
              (1): ReLU()
              (2): Linear(in_features=256, out_features=256, bias=True)
              (3): ReLU()
              (4): Linear(in_features=256, out_features=1, bias=True)
            )
            (qf1): Sequential(
              (0): Linear(in_features=12, out_features=256, bias=True)
              (1): ReLU()
              (2): Linear(in_features=256, out_features=256, bias=True)
              (3): ReLU()
              (4): Linear(in_features=256, out_features=1, bias=True)
            )
          )
        )
policy_class:
    value: <class 'stable_baselines3.sac.policies.SACPolicy'>
policy_kwargs:
    value: '{''use_sde'': False}'
policy_type:
    value: MlpPolicy
pop_size:
    value: 1000
replay_buffer:
    value: <stable_baselines3.common.buffers.ReplayBuffer object at 0x14e6f8560>
replay_buffer_class:
    value: <class 'stable_baselines3.common.buffers.ReplayBuffer'>
replay_buffer_kwargs:
    value: '{}'
returns_params:
    value:
        - 0.04
        - 0.2
reward_type:
    value: R1
run_id_for_evaluation:
    value: ""
schedule:
    value: const
sde_sample_freq:
    value: -1
seed:
    value: None
start_time:
    value: 1741504184334603000
target_entropy:
    value: -3
target_update_interval:
    value: 1
tau:
    value: 0.005
tensorboard_log:
    value: results/wandb_log/SAC/3jgqgyrp
total_steps:
    value: 500000
train_freq:
    value: 'TrainFreq(frequency=1, unit=<TrainFrequencyUnit.STEP: ''step''>)'
use_sde:
    value: "False"
use_sde_at_warmup:
    value: "False"
use_wandb:
    value: true
verbose:
    value: 1
wealth_init_params:
    value:
        - 12
        - 2
